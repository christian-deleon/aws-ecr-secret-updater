---
alwaysApply: false
description: Best practices for aws-ecr-secret-updater Helm chart
---
# AWS ECR Secret Updater Helm Chart

This Helm chart is designed to simplify the creation and patching of ECR secrets across specified namespaces in a Kubernetes cluster.

## Purpose
- Automate the management of AWS ECR credentials as Kubernetes secrets.
- Ensure secure handling of sensitive credentials.
- Support multiple namespaces for secret deployment.

## Security Best Practices
1. **Least Privilege**: Ensure the service account used (`aws-ecr-secret-updater`) has the minimum required permissions. As seen in [templates/rbac.yaml](mdc:aws-ecr-secret-updater/templates/rbac.yaml), the role is limited to specific actions (`get`, `create`, `update`, `patch`) on secrets and optionally service accounts.
2. **Namespace Isolation**: Secrets are managed per namespace as defined in `.Values.namespaces`, preventing unauthorized access across namespaces.
3. **Secret Naming**: Use consistent naming (`{{ .Values.secretName }}`) for secrets to avoid confusion or overlap.

## Readability Best Practices
1. **Clear Templating**: Use clear and consistent templating in YAML files for easy understanding. For example, in [templates/rbac.yaml](mdc:aws-ecr-secret-updater/templates/rbac.yaml), the use of `{{- range .Values.namespaces }}` clearly iterates over namespaces.
2. **Documentation**: Include detailed comments or a README (like [README.md](mdc:aws-ecr-secret-updater/README.md)) to explain the chart's functionality and usage.
3. **Structured Values**: Organize values in `values.yaml` logically, grouping related configurations together.
